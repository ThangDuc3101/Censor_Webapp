from flask import Flask,render_template,session,Response
from flask_wtf import FlaskForm
from wtforms import FileField,SubmitField
from werkzeug.utils import secure_filename
from wtforms.validators import InputRequired
import os
from detector import CensorApp
import cv2

app = Flask(__name__,static_folder="static",template_folder="templates")

app.config["SECRET_KEY"]='thangduc'
app.config['UPLOAD_FOLDER']="static/uploads"

# If you want to use Flask-wtf to submit a form, you need some things:
#   -  a class inheriten FlaskForm
#   -  config some thing. In this project, I config 2 parameters: SECRET_KEY, UPLOAD_FOLDER
#   -  a form in html page to submit

class UploadFileForm(FlaskForm):
    file = FileField("File", validators=[InputRequired()])
    submit = SubmitField("Upload File")
 
@app.route("/")
@app.route("/home")
def home():
    return render_template("about.html")

"""
This function returns the about.html template when the /about endpoint is accessed. The rendered HTML template for the "about.html" page.
"""
@app.route("/about")
def about():
    return render_template("about.html")

"""
These function handles the uploading of a video file and saves its path to a session variable. The rendered template 'hand.html'/'face.html' along with the form object.
"""
@app.route("/hand_video",methods=['GET','POST'])    
def hand():
    # session.clear()
    form = UploadFileForm()
    if form.validate_on_submit():
        file = form.file.data # file name
        # get full path of the uploaded file
        path = os.path.join(
            os.path.abspath(os.path.dirname(__file__)),
            app.config['UPLOAD_FOLDER'],
            secure_filename(file.filename))
        # print(path)
        file.save(path) # save file to folder that names "uploads"
        session["video_hand"] = path # save path to a session 
        
        # Note: If want to get some information that was send from other page. You should use session. Session is similar to a variable in Programing Language, it can save information and in other page you can get session with its name to get needed information.
        
    return render_template('hand.html', form=form)

@app.route("/face_video",methods=["GET",'POST'])
def face():
    # session.clear()
    form = UploadFileForm()
    if form.validate_on_submit():
        file = form.file.data # file name
        # get full path of the uploaded file
        path = os.path.join(
            os.path.abspath(os.path.dirname(__file__)),
            app.config['UPLOAD_FOLDER'],
            secure_filename(file.filename))
        # print(path)
        file.save(path) # save file to folder that names "uploads"
        session["video_face"] = path # save path to a session 
    return render_template("face.html",form=form)

def generate_video(path_video,mode="hand"):
    censor = CensorApp(path_video,mode)
    
    for img in censor():
        _,buffer = cv2.imencode('.jpg',img)
        
        frame = buffer.tobytes()
        yield (b'--frame\r\n' b'Content-Type: image/jpeg\r\n\r\n' + frame +b'\r\n')

"""
These function returns a response with a video stream of blurred faces.The function `face_blur()` and `hand_blur()` returns a `Response` object that is generated by calling the   `generate_video()` function with 2 arguments, and sets the `mimetype` to    `"multipart/x-mixed-replace; boundary=frame"`.
"""
MIMETYPE = "multipart/x-mixed-replace; boundary=frame"
@app.route("/face_blur")
def face_blur():
    # session.clear()
    path = session.get("video_face",None)
    return Response(generate_video(path,"face"),mimetype=MIMETYPE)
@app.route("/hand_blur")
def hand_blur():
    # session.clear()
    path = session.get("video_hand",None)
    return Response(generate_video(path,"hand"),mimetype=MIMETYPE)

"""
This function returns the hand_webcam.html template when the /face_webcam endpoint is accessed. The rendered HTML template for the "face_webcam.html" page.
"""
@app.route("/face_webcam")
def face_webcam():
    return render_template("face_webcam.html")

"""
This function returns the hand_webcam.html template when the /hand_webcam endpoint is accessed. The rendered HTML template for the "hand_webcam.html" page.
"""
@app.route("/hand_webcam")
def hand_webcam():
    return render_template("hand_webcam.html")

"""
These function returns a response containing a video generated by the "generate_video" function with a blur effect applied to faces in the video captured by the webcam. The function `generate_video()` is being called and the output of this function is being returned as a response. The response is set to have a mimetype of `MIMETYPE`.
"""
@app.route("/face_blur_webcam")
def face_blur_webcam():
    return Response(generate_video(0,"face"),mimetype=MIMETYPE)

@app.route("/hand_blur_webcam")
def hand_blur_webcam():    
    return Response(generate_video(0,"hand"),mimetype=MIMETYPE)

if __name__=="__main__":
    app.run(debug=True)